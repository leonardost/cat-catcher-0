pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
--[[
  cat catcher 0 v0.0.1 - (c) lst 2019
  ===================================

  cat catcher 0 is the prequel
  to cat catcher. it's a simple
  game where our girl protagonist
  has to catch stray cats that
  are running rampant around the
  city and causing mischief.
  
  try to not let any cat escape!
  when they come close to you,
  press 🅾️ to capture them.
  be careful with the big ones,
  though! they are harder to
  catch.
--]]

function _init()
  t = 0
  -- actors can have .draw()
  -- and/or .update() methods
  actors = {}
  is_catching = false
  catching_t = 0

  current_floor = 0
  score = 0
  caught_cats = 0

  floor_base_y = 40

  cat = cat_actor(0)
  cat2 = cat_actor2(0)
  bigcat = bigcat_actor(1)
  bigcat2 = bigcat_actor2(2)
  girl = girl_actor(8, 40 + 32 * current_floor)
  add(actors, cat)
  add(actors, cat2)
  add(actors, bigcat)
  add(actors, bigcat2)
  add(actors, girl)
  
  elevator = elevator_actor(8, 40 + 32 * current_floor)
  add(actors, elevator)
end

function _update()
  t += 1

  for obj in all(actors) do
    if obj.update != nil then
      obj.update()
    end
  end

  if is_catching then
    catching_t += 1
    if catching_t == 5 then
      catching_t = 0
      is_catching = false
    end
  end
  if elevator.is_changing_floors() then
    girl.y = elevator.get_y()
  end
  
  if btn(⬆️) then
    change_floor(-1)
  end
  if btn(⬇️) then
    change_floor(1)
  end
  if btn(🅾️) then
    if not elevator.is_changing_floors() then
      catch()
      is_catching = true
    end
 	end
 
  --[[
  if btn(⬅️) then
    girl.walk(-2)
  end
  if btn(➡️) then
    girl.walk(2)
  end
  -- stops walking
  if girl.is_walking() and not btn(⬅️) and not btn(➡️) then
    girl.idle()
  end
  --]]
end

function change_floor(direction)
  if direction == -1 
    and current_floor > 0 
    and elevator.can_change_to(direction)
  then
    current_floor -= 1
    elevator.change_floor(direction)
    girl.change_floor(direction)
  end
  if direction == 1
    and current_floor < 2
    and elevator.can_change_to(direction)
  then
    current_floor += 1
    elevator.change_floor(direction)
    girl.change_floor(direction)
  end
end

function catch()
  sfx(12)
  for actor in all(actors) do
    if 
      actor.is_cat
      and girl.is_close_enough_to(actor)
      and actor.caught()
    then
	 	   score += 10
	 	   del(actors, actor)
    end
  end
end

function _draw()
  cls(1)
  map(0, 0, 0, 0, 16, 16)
  for gfx in all(actors) do
    if gfx.draw != nil then
      gfx.draw()
    end
  end
  if is_catching then
    spr(52, girl.x + 16, girl.y + 8)
  end
  print("score:  " .. score, 0, 0, 7)
end

-->8
function sprite(w, h, sprites, transparent_color)
  local w = w
  local h = h
  local sprites = sprites
  local self = {}
  local transparent_color = transparent_color

  function self.draw(x, y)
	   if transparent_color != nil then
      palt(transparent_color, true)
    end
    for i = 0, h - 1 do
	     for j = 0, w - 1 do
	       spr(
  	       sprites[i * w + j + 1],
  	       x + j * 8,
  	       y + i * 8
  	     )
  	   end
  	 end
    palt()
  end

  return self
end

-->8
function animation()
  local sprites = {}
  local durations = {}
  local number_of_sprites = 0
  local current_frame = 1
  local ticks = 0
  local finished_callback = nil

  local self = {}
  function self.add_frame(sprite, duration)
    add(sprites, sprite)
    add(durations, duration)
    number_of_sprites += 1
  end
  function self.set_finished_callback(callback)
    finished_callback = callback
  end
  function self.start()
    ticks = 0
    current_frame = 1
  end
  function self.update()
    ticks += 1
    if ticks >= durations[current_frame] then
      current_frame += 1
      if current_frame > number_of_sprites then
        current_frame = 1
        if finished_callback != nil then
          finished_callback()
        end
      end
      ticks = 0
    end
  end
	 function self.draw(x, y)
	   sprites[current_frame].draw(x, y)
	 end

  return self
end

-->8
function girl_actor(x, y)
  local t = 0
  local w = 16
  local h = 16
  local idle_t = 0
  local floor = 0

  local girl1 = sprite(2, 2, { 20, 21, 36, 37 }, 14)
  local animation_idle = animation()
  animation_idle.add_frame(girl1, 30)
  local idle_state = state(
    "idle",
    animation_idle
  )

  local girl2 = sprite(2, 2, { 22, 23, 38, 39 }, 14)
  local girl3 = sprite(2, 2, { 24, 25, 40, 41 }, 14)
  local animation_blink = animation()
  animation_blink.add_frame(girl2, 2)
  animation_blink.add_frame(girl3, 5)
  animation_blink.add_frame(girl2, 2)
  local blink_state = state(
    "blink",
    animation_blink
  )

  local girl4 = sprite(2, 2, { 26, 27, 42, 43 }, 14)
  local girl5 = sprite(2, 2, { 28, 29, 44, 45 }, 14)
  animation_yawn = animation()
  animation_yawn.add_frame(girl2, 5)
  animation_yawn.add_frame(girl3, 20)
  animation_yawn.add_frame(girl4, 13)
  animation_yawn.add_frame(girl5, 40)
  animation_yawn.add_frame(girl4, 13)
  animation_yawn.add_frame(girl3, 20)
  animation_yawn.add_frame(girl2, 5)
  local yawn_state = state(
    "yawn",
    animation_yawn
  )
  
  local girl6 = sprite(2, 2, { 30, 31, 46, 47 }, 14)
  animation_walk = animation()
  animation_walk.add_frame(girl6, 5)
  animation_walk.add_frame(girl1, 5)
  local walk_state = state(
    "walk",
    animation_walk
  )

  local girl = actor(x, y, {
    idle_state,
    blink_state,
    yawn_state,
    walk_state
  })
  
  function girl.update()
    t += 1
    if girl.is_idle() then
      idle_t += 1
    else
      idle_t = 0
    end
    
    -- idle
		  if girl.current_state == 1 then
     	if t % 10 == 0 and flr(rnd(100)) > 70 then
     	  girl.change_to_state(2)
      elseif idle_t > 300 then
        girl.change_to_state(3)
        idle_t = 0
      end
    end

    girl.update_state()
  end
  
  function girl.walk(distance)
    girl.x += distance
    girl.change_to_state(4)
  end

  function girl.idle()
    girl.change_to_state(1)
  end

  function girl.is_walking()
  	 return girl.current_state == 4
  end

  function girl.is_idle()
    return girl.current_state >= 1 and girl.current_state <= 3
  end

  function girl.change_floor(direction)
    if direction == -1 and floor > 0 then
      floor -= 1
      idle_t = 0
    elseif direction == 1 and floor < 2 then
      floor += 1
      idle_t = 0
    end
  end

  function girl.is_close_enough_to(cat)
    if 
      girl.x + w >= cat.x - 4
      and girl.x + w < cat.x + 8
      and floor == cat.floor
      and cat.is_vulnerable
    then
      return true
    end
  end

  blink_state.set_finished_callback(girl.idle)
  yawn_state.set_finished_callback(girl.idle)
  
  return girl
end

-->8
function actor(x, y, states)
  local states = states
  local self = {
    x = x,
    y = y,
    current_state = 1
  }

  function self.change_to_state(new_state)
    self.current_state = new_state
    states[self.current_state].start()
  end
  function self.get_current_state()
    return states[self.current_state].name
  end
  -- remember to call this in
  -- the actor's update() method 
  function self.update_state()
    states[self.current_state].update()
  end
  function self.draw()
    states[self.current_state].draw(self.x, self.y)
  end

  return self
end

-->8
function state(name, animation)
  local self = {
    name = name,
    animation = animation
  }

  function self.set_finished_callback(callback)
    animation.set_finished_callback(callback)
  end
  function self.start()
    animation.start()
  end
  function self.update()
    animation.update()
  end
  function self.draw(x, y)
    animation.draw(x, y)
  end

  return self
end

-->8
function cat_actor(floor)
  local life = 1
  local cat1 = sprite(1, 1, { 1 })
  local cat2 = sprite(1, 1, { 2 })
  local animation = animation()
  animation.add_frame(cat1, 8)
  animation.add_frame(cat2, 8)
  local walking = state(
  	 "walking",
  	 animation
  )
  local cat = actor(
    128,
    floor_base_y + 8 + floor * 32,
    { walking }
  )
  
  function cat.update()
    cat.update_state()
    cat.x -= 1
    if cat.x < -8 then
      cat.x = 128
    end
  end

  function cat.caught()
    life -= 1
    if life == 0 then
      sfx(8)
      return true
    end
    return false
  end
  
  cat.is_cat = true
  cat.floor = floor
	 cat.is_vulnerable = true
  
  return cat
end

function cat_actor2(floor)
  local life = 1
  local cat1 = sprite(1, 1, { 10 })
  local cat2 = sprite(1, 1, { 11 })
  local animation = animation()
  animation.add_frame(cat1, 8)
  animation.add_frame(cat2, 8)
  local walking = state(
  	 "walking",
  	 animation
  )
  local cat = actor(
    128,
    floor_base_y + 8 + floor * 32,
    { walking }
  )
  
  function cat.update()
    cat.update_state()
    cat.x -= 2
    if cat.x < -8 then
      cat.x = 128
    end
  end
  
  function cat.caught()
    life -= 1
    if life == 0 then
      sfx(8)
      return true
    end
    return false
  end
  
  cat.is_cat = true
  cat.floor = floor
  cat.is_vulnerable = true
  
  return cat
end

function bigcat_actor(floor)
  local life = 3
  local cat1 = sprite(2, 2, { 16, 17, 32, 33 })
  local cat2 = sprite(2, 2, { 18, 19, 34, 35 })
  local animation_walk = animation()
  animation_walk.add_frame(cat1, 8)
  animation_walk.add_frame(cat2, 8)
  local walking = state(
  	 "walking",
  	 animation_walk
  )

  local stun1 = sprite(2, 2, { 98, 99, 114, 115 })
  local animation_stunned = animation()
  animation_stunned.add_frame(stun1, 30)
  local stunned = state(
    "stunned",
    animation_stunned
  )

  local bigcat = actor(
    128,
    floor_base_y + floor * 32,
    { walking, stunned }
  )

  stunned.set_finished_callback(function()
    bigcat.change_to_state(1)
    bigcat.is_vulnerable = true
  end)

  function bigcat.update()
    bigcat.update_state()

    if bigcat.current_state == 1 then
		    bigcat.x -= 1
		    if bigcat.x < -16 then
		      bigcat.x = 128
		    end
		  elseif bigcat.current_state == 2 then
		    -- stunned
		    bigcat.x += 1
      -- todo: implement bumps with gravity
    end
  end
  
  function bigcat.caught()
    life -= 1
    bigcat.change_to_state(2)
    bigcat.is_vulnerable = false
    if life == 0 then
      sfx(8)
      return true
    end
    return false
  end

  bigcat.is_cat = true
  bigcat.floor = floor
  bigcat.is_vulnerable = true
  
  return bigcat
end

function bigcat_actor2(floor)
  local life = 3
  
  local cat1 = sprite(2, 2, { 64, 65, 80, 81 })
  local cat2 = sprite(2, 2, { 66, 67, 82, 83 })
  local animation_walk = animation()
  animation_walk.add_frame(cat1, 8)
  animation_walk.add_frame(cat2, 8)
  local walking = state(
  	 "walking",
  	 animation_walk
  )
  
  local stun1 = sprite(2, 2, { 100, 101, 116, 117 })
  local animation_stunned = animation()
  animation_stunned.add_frame(stun1, 30)
  local stunned = state(
    "stunned",
    animation_stunned
  )

  local bigcat = actor(
    128,
    floor_base_y + floor * 32,
    { walking, stunned }
  )

  stunned.set_finished_callback(function()
    bigcat.change_to_state(1)
    bigcat.is_vulnerable = true
  end)

  function bigcat.update()
    bigcat.update_state()
    
    if bigcat.current_state == 1 then
		    bigcat.x -= 1
		    if bigcat.x < -16 then
		      bigcat.x = 128
		    end
		  elseif bigcat.current_state == 2 then
		    -- stunned
		    bigcat.x += 1
      -- todo: implement bumps with gravity
    end
  end
  
  function bigcat.caught()
    life -= 1
    bigcat.change_to_state(2)
    bigcat.is_vulnerable = false
    if life == 0 then
      sfx(8)
      return true
    end
    return false
  end

  bigcat.is_cat = true
  bigcat.floor = floor
  bigcat.is_vulnerable = true
    
  return bigcat
end

-->8
function elevator_actor(x, y)
	 local x = x
	 local y = y
	 local t = 0
	 local state = 0
	 --[[
	   states:
	   0 = open, still
	   1 = closing
	   2 = moving between floors
	   3 = opening
	 --]]
	 local gap_width = 7
	 local current_floor = 0
	 local destination_floor = 0
	 local direction = 0 -- -1 -> up, 1 -> down
	 local self = {}

  function self.draw()
    rect(x, y, x + 15, y + 15, 5)
    if state != 0 then
      rectfill(x + 1, y + 1, x + 7 - gap_width, y + 14, 6)
      rectfill(x + 8 + gap_width, y + 1, x + 14, y + 14, 6)
		    local left_gap = x + 7 - gap_width
		    local right_gap = x + 8 + gap_width
		    line(left_gap, y + 1, left_gap, y + 14, 13)
		    line(right_gap, y + 1, right_gap, y + 14, 7)
		  end
  end

  function self.update()
    t += 1

    if state == 1 then
      gap_width -= 2
      if gap_width <= 0 then
        gap_width = 0
        state = 2
      end
    elseif state == 2 then
      if y < 40 + destination_floor * 32 then
        y += 4
      elseif y > 40 + destination_floor * 32 then
        y -= 4
      else
        state = 3
      end
    elseif state == 3 then
      gap_width += 2
      if gap_width >= 7 then
        gap_width = 7
        state = 0
        floor = destination_floor
      end
    end
  end

  function self.change_floor(new_direction)
    if self.is_changing_floors() and direction == new_direction then return end

    direction = new_direction
    state = 1
    destination_floor += new_direction
    if destination_floor < 0 then
      destination_floor = 0
    elseif destination_floor > 2 then
      destination_floor = 2
    end
  end
  
  function self.can_change_to(new_direction)
    if not self.is_changing_floors() then
      return true
    end
    if direction == new_direction then
      return false
    end
    return true
  end
  
  function self.get_y()
    return y
  end

  function self.is_changing_floors()
    return state != 0
  end

	 return self
end

__gfx__
00000000505000555050000544444444000000000000000055555555044444403333333311111111000000000000009070700077707000070000000000000000
00000000555000055550000544b4b44400000000000000006666666644999944b3b3b3a3cccccccc404000944040000477700007777000070000000000000000
00000000a5a00005a5a00005bbbbbbb4000000000000ccc06666666649499494bbbbbbbbccc7c7cc4440000444400004c7c00007c7c000070000000000000000
000000005555555555555555bbbbbbb400770770000ccc0c6666666649944994abbbbbbbcccccc77a4a00004a4a0000477777777777777770000000000000000
000000005555555555555555b3bb3bb40700000000cccc776666666649944994bbbbabbb77cccccc444494944444949477777777777777770000000000000000
000000005050050550500505bbbbbbb407077707ccc777706666666649499494bbbbbbbacccccccc444444404444444077777777777777770000000000000000
000000005050050550550555b3bb3bbb007777700c0000006666666644999944bbabbbbbcccc7cc7444444404444444470700707707007770000000000000000
000000005050050505000005b3333bbb00777770000000005555555504444440bbbbbbbbcccccccc404040400404000070700707070700070000000000000000
50000005000066505000000500000000eeeee222222444eeeeeee222222444eeeeeee222222444eeeeeee222222444eeeeeee222222444eeeeeee222222444ee
55000055000065555500005500006655eeee2222224f244eeeee2222224f244eeeee2222224f244eeeee2222224f244eeeee2222224f244eeeee2222224f244e
55500555000000555550055500006555eee22222224ff244eee22222224ff244eee22222224ff244eee22222224ff244eee22222224ff244eee22222224ff244
55555555000000555555555500000055eee2222224ffff24eee2222224ffff24eee2222224ffff24eee2222224ffff24eee2222224ffff24eee2222224ffff24
55555555000000555555555500000055eee2222244ffff24eee2222244ffff24eee2222244ffff24eee2222244ffff24eee2222244ffff24eee2222244ffff24
5aa55aa5500000555aa55aa550000055e2c2222447ff07f2e2c222244ffffff2e2c222244ffffff2e2c222244ffffff2e2c222244ffffff2e2c2222447ff07f2
5aa55aa5555555555aa55aa55555555522c2244f00ff00f222c2244f07ff07f222c2244ffffffff222c2244ffffffff222c2244ffffffff222c2244f00ff00f2
555e555555555555555e55555555555522c244ff00ff00f222c244ff00ff00f222c244f000ff000222c244f000ff000222c244f000ff000222c244ff00ff00f2
6555556665555555655555666555555522144fff04ff04ff22144fff44ff44ff22144fffffffffff22144fffffffffff22144ff7ffffff7f22144fff04ff04ff
5555555555555555555555555555555522e44fff44ff44ff22e44fffffffffff22e44fffffffffff22e44fffffffffff22e44ffffeeeefff22e44fff44ff44ff
5556655555555555555665555555555024ee44ffffffffff24ee44ffffffffff24ee44ffffffffff24ee44ffffeeffff24ee44fffeeeefff24ee44ffffffffff
5560065555550555556006555555055024eee44ffffffffe24eee44ffffffffe24eee44ffffffffe24eee44fffeefffe24eee44ffeeeeffe24eee44ffffffffe
55000055055000555500005505500555224eeefffffffeee224eeefffffffeee224eeefffffffeee224eeefffffffeee224eeefffffffeee224eeefffffffeee
5500005505500055556000550550055522244eebbabbeeee22244eebbabbeeee22244eebbabbeeee22244eebbabbeeee22244eebbabbeeee22244eebbabbeeee
55000055055000555660005605550055e222eeebbbbbeeeee222eeebbbbbeeeee222eeebbbbbeeeee222eeebbbbbeeeee222eeebbbbbeeeee222ee1bbbbb1eee
66000066065000650000006605560066eeeeeee1eee1eeeeeeeeeee1eee1eeeeeeeeeee1eee1eeeeeeeeeee1eee1eeeeeeeeeee1eee1eeeeeeeeeeeeeeeeeeee
101000611010006100000000000000a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1110000111100001909000a990900009000676700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
a1a00001a1a000019990000999900009006767670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11161611111616117970000979700009007676760000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111119999a9a99999a9a9006767670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10100101101001019999999099999990007676760000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10100101101601619999999099999999006767670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
60600606060000069090909009090000999999990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
70000007000077407000000700000000d000000d0000dd10d000000d000000000099990000000000000000000000000066666666666666666666666600000000
44000044000074444400004400007744110000110000d111110000110000dd11099999900555555500090000000300006cccccc66cccccccccccccc604444440
444004440000004444400444000074441110011100000011111001110000d111099999900565556504444444000030306cccccc66cccccccccccccc604ffff40
4444444400000044444444440000004411111111000000111111111100000011099999900566666500004000000033006cccccc66ccccccc7777ccc604f22f40
4444444400000044444444440000004411111111000000111111111100000011889999880555555500004000000030006cccc7766ccccc7777777cc604fe2f40
4aa44aa4400000444aa44aa44000004417711771100000111771177110000011889999880565556500004000005555506cc777766777ccccccccccc604feef40
4aa44aa4447474444aa44aa4447474441771177111d1d1111771177111d1d111898888980566666500004000000666006cccccc667777cccccccccc604444440
4449444444474744444944444447474411161111111d1d1111161111111d1d118999999805555555000444000006660066666666666666666666666600000000
74444477744444447444447774444444d11111ddd1111111d11111ddd111111100ffffffffffff00000000000000000000000000000000000000000000000000
44444444444444444444444444444444111111111111111111111111111111110ffffffffffffff0000000000000000000000000000000000000000000000000
44477444444444444447744444444440111dd11111111111111dd111111111100ffffffffffffff0000000000000000000000000000000000000000000000000
4470074444440444447007444444044011d00d111111011111d00d11111101100ffffffffffffff0000000000000000000000000000000000000000000000000
4400004404400044440000440440044411000011011000111100001101100111eeffffffffffffee000000000000000000000000000000000000000000000000
44000044044000444470004404400444110000110110001111d0001101100111efeffffffffffefe000000000000000000000000000000000000000000000000
4400004404400044477000470444004411000011011000111dd0001d01110011efeeeeeeeeeeeefe000000000000000000000000000000000000000000000000
77000077074000740000007704470077110000110d1000d1000000dd011d00ddefeffffffffffefe000000000000000000000000000000000000000000000000
55555550000000055000000500000000700000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
56000065000000055500005500006655440000440000774400000000000000000000000000000000000000000000000000000000000000000000000000000000
50600605000000055550055500006555444004440000744400000000000000000000000000000000000000000000000000000000000000000000000000000000
50067005000000055555555500000055444444440000004400000000000000000000000000000000000000000000000000000000000000000000000000000000
50066005000000055555555500000055444444440000004400000000000000000000000000000000000000000000000000000000000000000000000000000000
50600605000000055a5555a5500000554a4444a44000004400000000000000000000000000000000000000000000000000000000000000000000000000000000
560000650000000555a55a555555555544a44a444474744400000000000000000000000000000000000000000000000000000000000000000000000000000000
0555555500000005555e555555555555444944444447474400000000000000000000000000000000000000000000000000000000000000000000000000000000
50000000555555506555556665555555744444777444444400000000000000000000000000000000000000000000000000000000000000000000000000000000
50000000560000655555555555555555444444444444444400000000000000000000000000000000000000000000000000000000000000000000000000000000
50000000506006055556655555555550444774444444444000000000000000000000000000000000000000000000000000000000000000000000000000000000
50000000500670055560065555550550447007444444044000000000000000000000000000000000000000000000000000000000000000000000000000000000
50000000500660055500005505500555440000440440044400000000000000000000000000000000000000000000000000000000000000000000000000000000
50000000506006055560005505500555447000440440044400000000000000000000000000000000000000000000000000000000000000000000000000000000
50000000560000655660005605550055477000470444004400000000000000000000000000000000000000000000000000000000000000000000000000000000
50000000055555550000006605560066000000770447007700000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000004d4e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000048000000004b494949494a4b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0606060606060606060606060606060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000004c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000480000004b000048000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0606060606060606060606060606060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000004c0000000000004c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000004b00004a00494900004b494900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0606060606060606060606060606060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000004d4e0000000000000000004c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000004b000000485859004b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0606060606060606060606060606060600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
00010000000002d0502f050310503105033050340503505036050370503705037050380503805038050370503505033050300502d0502a0502705024050210501e0501b050180501605014050120501105010050
011e00000c550105500c550105500c550105500c550105500b550105500b550105500b550105500b550105500c550105500c550105500c550105500c55010550135501755013550175500e550115500e55011550
011000002d250092500000009250000000d2500f2500000000000000000000000000000000000000000000002d250092500000009250000000d2500f250000000000000000000000000000000000000000000000
011000001f1501a050001001a0501f0501a05000100000000000000000000001f1501a0501f1501a050001001a0501f0501a05000100001000010000100001001f1501a0501f1501a050001001a0501f0501a050
01100000247502475024750247502875028750287502875026750267502675026750297502975029750297502b7502b7502b7502b750297502975029750297502875028750287502875024750247502475024750
011000001335010350003000030000300003000030000300003000030000300003000030000300003000030000300003000030000300003000030000300003000030000300003000030000300003000030000300
0002000035550365503755038550395503b5503c5503e5503f5503f5503f5503f5503f5503f5503e5503d5503c5503a5503855037550355503355025500005000050000500005000050000500005000050000500
010f00000c550000000c5500c5500c550075500c5500e550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00020000285502a5502c5502e55030550315503255032550315502e5502c550305502e550295502755025550215501d5500000000000000000000000000000000000000000000000000000000000000000000000
000200003075032750347503675037750397503a7503a75038750367503775039750377503475032750307502d7502a7502975000700007000070000700007000070000700007000070000700007000070000700
00050000360503c050290502e05037050210502705000000170500000007050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00020000285502b5502d5502e5502f550305502f5502e5502a5502f5502c550285502455024550005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500
000400000562004610026000060000600006000060000600006000060000600006000060000600006000060000600006000060000600006000060000600006000060000600006000060000600006000060000600
__music__
00 04034344

